package com.begoit.mooc.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.begoit.mooc.offline.entity.course.user_download.AppLogEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_LOG_ENTITY".
*/
public class AppLogEntityDao extends AbstractDao<AppLogEntity, String> {

    public static final String TABLENAME = "APP_LOG_ENTITY";

    /**
     * Properties of entity AppLogEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property IsChange = new Property(1, int.class, "isChange", false, "IS_CHANGE");
        public final static Property UserAccount = new Property(2, String.class, "userAccount", false, "USER_ACCOUNT");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property CreateTime = new Property(6, String.class, "createTime", false, "CREATE_TIME");
    }


    public AppLogEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AppLogEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_LOG_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"IS_CHANGE\" INTEGER NOT NULL ," + // 1: isChange
                "\"USER_ACCOUNT\" TEXT," + // 2: userAccount
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"TYPE\" TEXT," + // 4: type
                "\"CONTENT\" TEXT," + // 5: content
                "\"CREATE_TIME\" TEXT);"); // 6: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_LOG_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppLogEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getIsChange());
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(3, userAccount);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(7, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppLogEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getIsChange());
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(3, userAccount);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(7, createTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public AppLogEntity readEntity(Cursor cursor, int offset) {
        AppLogEntity entity = new AppLogEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getInt(offset + 1), // isChange
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userAccount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppLogEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsChange(cursor.getInt(offset + 1));
        entity.setUserAccount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AppLogEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(AppLogEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppLogEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
