package com.begoit.mooc.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.begoit.mooc.offline.entity.course.course_detail.course_files.ArticelEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICEL_ENTITY".
*/
public class ArticelEntityDao extends AbstractDao<ArticelEntity, String> {

    public static final String TABLENAME = "ARTICEL_ENTITY";

    /**
     * Properties of entity ArticelEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ChapterId = new Property(1, String.class, "chapterId", false, "CHAPTER_ID");
        public final static Property SectionName = new Property(2, String.class, "sectionName", false, "SECTION_NAME");
        public final static Property SectionPosition = new Property(3, String.class, "sectionPosition", false, "SECTION_POSITION");
        public final static Property Sort = new Property(4, String.class, "sort", false, "SORT");
    }

    private DaoSession daoSession;

    private Query<ArticelEntity> articleClassEntity_ArticelQuery;

    public ArticelEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ArticelEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICEL_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CHAPTER_ID\" TEXT NOT NULL ," + // 1: chapterId
                "\"SECTION_NAME\" TEXT," + // 2: sectionName
                "\"SECTION_POSITION\" TEXT," + // 3: sectionPosition
                "\"SORT\" TEXT);"); // 4: sort
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICEL_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArticelEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getChapterId());
 
        String sectionName = entity.getSectionName();
        if (sectionName != null) {
            stmt.bindString(3, sectionName);
        }
 
        String sectionPosition = entity.getSectionPosition();
        if (sectionPosition != null) {
            stmt.bindString(4, sectionPosition);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(5, sort);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArticelEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getChapterId());
 
        String sectionName = entity.getSectionName();
        if (sectionName != null) {
            stmt.bindString(3, sectionName);
        }
 
        String sectionPosition = entity.getSectionPosition();
        if (sectionPosition != null) {
            stmt.bindString(4, sectionPosition);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(5, sort);
        }
    }

    @Override
    protected final void attachEntity(ArticelEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ArticelEntity readEntity(Cursor cursor, int offset) {
        ArticelEntity entity = new ArticelEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // chapterId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sectionName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sectionPosition
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // sort
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArticelEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChapterId(cursor.getString(offset + 1));
        entity.setSectionName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSectionPosition(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSort(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ArticelEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ArticelEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ArticelEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "articel" to-many relationship of ArticleClassEntity. */
    public List<ArticelEntity> _queryArticleClassEntity_Articel(String chapterId) {
        synchronized (this) {
            if (articleClassEntity_ArticelQuery == null) {
                QueryBuilder<ArticelEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChapterId.eq(null));
                articleClassEntity_ArticelQuery = queryBuilder.build();
            }
        }
        Query<ArticelEntity> query = articleClassEntity_ArticelQuery.forCurrentThread();
        query.setParameter(0, chapterId);
        return query.list();
    }

}
