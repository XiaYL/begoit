package com.begoit.mooc.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.begoit.mooc.offline.entity.course.course_detail.CourseDetailEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE_DETAIL_ENTITY".
*/
public class CourseDetailEntityDao extends AbstractDao<CourseDetailEntity, String> {

    public static final String TABLENAME = "COURSE_DETAIL_ENTITY";

    /**
     * Properties of entity CourseDetailEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property TypeName = new Property(1, String.class, "typeName", false, "TYPE_NAME");
        public final static Property ChannelTypeId = new Property(2, String.class, "channelTypeId", false, "CHANNEL_TYPE_ID");
        public final static Property ChannelName = new Property(3, String.class, "channelName", false, "CHANNEL_NAME");
        public final static Property SchoolName = new Property(4, String.class, "schoolName", false, "SCHOOL_NAME");
        public final static Property ExpectTime = new Property(5, String.class, "expectTime", false, "EXPECT_TIME");
        public final static Property HardLevel = new Property(6, String.class, "hardLevel", false, "HARD_LEVEL");
        public final static Property PreImgFileid = new Property(7, String.class, "preImgFileid", false, "PRE_IMG_FILEID");
        public final static Property PreVideoFileid = new Property(8, String.class, "preVideoFileid", false, "PRE_VIDEO_FILEID");
        public final static Property PreVideoSubtitleFileid = new Property(9, String.class, "preVideoSubtitleFileid", false, "PRE_VIDEO_SUBTITLE_FILEID");
        public final static Property ChannelLogoFileid = new Property(10, String.class, "channelLogoFileid", false, "CHANNEL_LOGO_FILEID");
        public final static Property Introduction = new Property(11, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Knowlage = new Property(12, String.class, "knowlage", false, "KNOWLAGE");
        public final static Property Program = new Property(13, String.class, "program", false, "PROGRAM");
        public final static Property ChannelSize = new Property(14, String.class, "channelSize", false, "CHANNEL_SIZE");
    }

    private DaoSession daoSession;


    public CourseDetailEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDetailEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE_DETAIL_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TYPE_NAME\" TEXT," + // 1: typeName
                "\"CHANNEL_TYPE_ID\" TEXT," + // 2: channelTypeId
                "\"CHANNEL_NAME\" TEXT," + // 3: channelName
                "\"SCHOOL_NAME\" TEXT," + // 4: schoolName
                "\"EXPECT_TIME\" TEXT," + // 5: expectTime
                "\"HARD_LEVEL\" TEXT," + // 6: hardLevel
                "\"PRE_IMG_FILEID\" TEXT," + // 7: preImgFileid
                "\"PRE_VIDEO_FILEID\" TEXT," + // 8: preVideoFileid
                "\"PRE_VIDEO_SUBTITLE_FILEID\" TEXT," + // 9: preVideoSubtitleFileid
                "\"CHANNEL_LOGO_FILEID\" TEXT," + // 10: channelLogoFileid
                "\"INTRODUCTION\" TEXT," + // 11: introduction
                "\"KNOWLAGE\" TEXT," + // 12: knowlage
                "\"PROGRAM\" TEXT," + // 13: program
                "\"CHANNEL_SIZE\" TEXT);"); // 14: channelSize
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE_DETAIL_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CourseDetailEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        String channelTypeId = entity.getChannelTypeId();
        if (channelTypeId != null) {
            stmt.bindString(3, channelTypeId);
        }
 
        String channelName = entity.getChannelName();
        if (channelName != null) {
            stmt.bindString(4, channelName);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(5, schoolName);
        }
 
        String expectTime = entity.getExpectTime();
        if (expectTime != null) {
            stmt.bindString(6, expectTime);
        }
 
        String hardLevel = entity.getHardLevel();
        if (hardLevel != null) {
            stmt.bindString(7, hardLevel);
        }
 
        String preImgFileid = entity.getPreImgFileid();
        if (preImgFileid != null) {
            stmt.bindString(8, preImgFileid);
        }
 
        String preVideoFileid = entity.getPreVideoFileid();
        if (preVideoFileid != null) {
            stmt.bindString(9, preVideoFileid);
        }
 
        String preVideoSubtitleFileid = entity.getPreVideoSubtitleFileid();
        if (preVideoSubtitleFileid != null) {
            stmt.bindString(10, preVideoSubtitleFileid);
        }
 
        String channelLogoFileid = entity.getChannelLogoFileid();
        if (channelLogoFileid != null) {
            stmt.bindString(11, channelLogoFileid);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(12, introduction);
        }
 
        String knowlage = entity.getKnowlage();
        if (knowlage != null) {
            stmt.bindString(13, knowlage);
        }
 
        String program = entity.getProgram();
        if (program != null) {
            stmt.bindString(14, program);
        }
 
        String channelSize = entity.getChannelSize();
        if (channelSize != null) {
            stmt.bindString(15, channelSize);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CourseDetailEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        String channelTypeId = entity.getChannelTypeId();
        if (channelTypeId != null) {
            stmt.bindString(3, channelTypeId);
        }
 
        String channelName = entity.getChannelName();
        if (channelName != null) {
            stmt.bindString(4, channelName);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(5, schoolName);
        }
 
        String expectTime = entity.getExpectTime();
        if (expectTime != null) {
            stmt.bindString(6, expectTime);
        }
 
        String hardLevel = entity.getHardLevel();
        if (hardLevel != null) {
            stmt.bindString(7, hardLevel);
        }
 
        String preImgFileid = entity.getPreImgFileid();
        if (preImgFileid != null) {
            stmt.bindString(8, preImgFileid);
        }
 
        String preVideoFileid = entity.getPreVideoFileid();
        if (preVideoFileid != null) {
            stmt.bindString(9, preVideoFileid);
        }
 
        String preVideoSubtitleFileid = entity.getPreVideoSubtitleFileid();
        if (preVideoSubtitleFileid != null) {
            stmt.bindString(10, preVideoSubtitleFileid);
        }
 
        String channelLogoFileid = entity.getChannelLogoFileid();
        if (channelLogoFileid != null) {
            stmt.bindString(11, channelLogoFileid);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(12, introduction);
        }
 
        String knowlage = entity.getKnowlage();
        if (knowlage != null) {
            stmt.bindString(13, knowlage);
        }
 
        String program = entity.getProgram();
        if (program != null) {
            stmt.bindString(14, program);
        }
 
        String channelSize = entity.getChannelSize();
        if (channelSize != null) {
            stmt.bindString(15, channelSize);
        }
    }

    @Override
    protected final void attachEntity(CourseDetailEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CourseDetailEntity readEntity(Cursor cursor, int offset) {
        CourseDetailEntity entity = new CourseDetailEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // channelTypeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // channelName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // schoolName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // expectTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hardLevel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // preImgFileid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // preVideoFileid
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // preVideoSubtitleFileid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // channelLogoFileid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // introduction
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // knowlage
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // program
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // channelSize
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CourseDetailEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChannelTypeId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChannelName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSchoolName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExpectTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHardLevel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPreImgFileid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPreVideoFileid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPreVideoSubtitleFileid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setChannelLogoFileid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIntroduction(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setKnowlage(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setProgram(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setChannelSize(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CourseDetailEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CourseDetailEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CourseDetailEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
