package com.begoit.mooc.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.begoit.mooc.offline.entity.course.course_detail.course_files.PreCourseEntity;

import com.begoit.mooc.offline.entity.course.course_detail.course_files.CourseDetailFilesEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE_DETAIL_FILES_ENTITY".
*/
public class CourseDetailFilesEntityDao extends AbstractDao<CourseDetailFilesEntity, String> {

    public static final String TABLENAME = "COURSE_DETAIL_FILES_ENTITY";

    /**
     * Properties of entity CourseDetailFilesEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ChannelName = new Property(1, String.class, "channelName", false, "CHANNEL_NAME");
        public final static Property ExpectTime = new Property(2, String.class, "expectTime", false, "EXPECT_TIME");
        public final static Property PreImgFileid = new Property(3, String.class, "preImgFileid", false, "PRE_IMG_FILEID");
        public final static Property PreVideoFileid = new Property(4, String.class, "preVideoFileid", false, "PRE_VIDEO_FILEID");
        public final static Property ChannelLogoFileid = new Property(5, String.class, "channelLogoFileid", false, "CHANNEL_LOGO_FILEID");
        public final static Property VideoTestPercent = new Property(6, int.class, "videoTestPercent", false, "VIDEO_TEST_PERCENT");
        public final static Property VideoPercent = new Property(7, int.class, "videoPercent", false, "VIDEO_PERCENT");
        public final static Property PassScore = new Property(8, int.class, "passScore", false, "PASS_SCORE");
        public final static Property IsNeedapply = new Property(9, int.class, "isNeedapply", false, "IS_NEEDAPPLY");
        public final static Property SchoolName = new Property(10, String.class, "schoolName", false, "SCHOOL_NAME");
        public final static Property ChannelSize = new Property(11, String.class, "channelSize", false, "CHANNEL_SIZE");
        public final static Property ChannelStyle = new Property(12, int.class, "channelStyle", false, "CHANNEL_STYLE");
        public final static Property ChannelTerm = new Property(13, int.class, "channelTerm", false, "CHANNEL_TERM");
        public final static Property VilidDate = new Property(14, String.class, "vilidDate", false, "VILID_DATE");
        public final static Property HardLevel = new Property(15, String.class, "hardLevel", false, "HARD_LEVEL");
        public final static Property DiscussionPercent = new Property(16, int.class, "discussionPercent", false, "DISCUSSION_PERCENT");
        public final static Property HomeworkPercent = new Property(17, int.class, "homeworkPercent", false, "HOMEWORK_PERCENT");
        public final static Property FinalTestPercent = new Property(18, int.class, "finalTestPercent", false, "FINAL_TEST_PERCENT");
        public final static Property VideoNumber = new Property(19, int.class, "videoNumber", false, "VIDEO_NUMBER");
        public final static Property LimitVideoTestNum = new Property(20, int.class, "limitVideoTestNum", false, "LIMIT_VIDEO_TEST_NUM");
        public final static Property TeacherScore = new Property(21, int.class, "teacherScore", false, "TEACHER_SCORE");
    }

    private DaoSession daoSession;


    public CourseDetailFilesEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDetailFilesEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE_DETAIL_FILES_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CHANNEL_NAME\" TEXT," + // 1: channelName
                "\"EXPECT_TIME\" TEXT," + // 2: expectTime
                "\"PRE_IMG_FILEID\" TEXT," + // 3: preImgFileid
                "\"PRE_VIDEO_FILEID\" TEXT," + // 4: preVideoFileid
                "\"CHANNEL_LOGO_FILEID\" TEXT," + // 5: channelLogoFileid
                "\"VIDEO_TEST_PERCENT\" INTEGER NOT NULL ," + // 6: videoTestPercent
                "\"VIDEO_PERCENT\" INTEGER NOT NULL ," + // 7: videoPercent
                "\"PASS_SCORE\" INTEGER NOT NULL ," + // 8: passScore
                "\"IS_NEEDAPPLY\" INTEGER NOT NULL ," + // 9: isNeedapply
                "\"SCHOOL_NAME\" TEXT," + // 10: schoolName
                "\"CHANNEL_SIZE\" TEXT," + // 11: channelSize
                "\"CHANNEL_STYLE\" INTEGER NOT NULL ," + // 12: channelStyle
                "\"CHANNEL_TERM\" INTEGER NOT NULL ," + // 13: channelTerm
                "\"VILID_DATE\" TEXT," + // 14: vilidDate
                "\"HARD_LEVEL\" TEXT," + // 15: hardLevel
                "\"DISCUSSION_PERCENT\" INTEGER NOT NULL ," + // 16: discussionPercent
                "\"HOMEWORK_PERCENT\" INTEGER NOT NULL ," + // 17: homeworkPercent
                "\"FINAL_TEST_PERCENT\" INTEGER NOT NULL ," + // 18: finalTestPercent
                "\"VIDEO_NUMBER\" INTEGER NOT NULL ," + // 19: videoNumber
                "\"LIMIT_VIDEO_TEST_NUM\" INTEGER NOT NULL ," + // 20: limitVideoTestNum
                "\"TEACHER_SCORE\" INTEGER NOT NULL );"); // 21: teacherScore
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE_DETAIL_FILES_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CourseDetailFilesEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String channelName = entity.getChannelName();
        if (channelName != null) {
            stmt.bindString(2, channelName);
        }
 
        String expectTime = entity.getExpectTime();
        if (expectTime != null) {
            stmt.bindString(3, expectTime);
        }
 
        String preImgFileid = entity.getPreImgFileid();
        if (preImgFileid != null) {
            stmt.bindString(4, preImgFileid);
        }
 
        String preVideoFileid = entity.getPreVideoFileid();
        if (preVideoFileid != null) {
            stmt.bindString(5, preVideoFileid);
        }
 
        String channelLogoFileid = entity.getChannelLogoFileid();
        if (channelLogoFileid != null) {
            stmt.bindString(6, channelLogoFileid);
        }
        stmt.bindLong(7, entity.getVideoTestPercent());
        stmt.bindLong(8, entity.getVideoPercent());
        stmt.bindLong(9, entity.getPassScore());
        stmt.bindLong(10, entity.getIsNeedapply());
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(11, schoolName);
        }
 
        String channelSize = entity.getChannelSize();
        if (channelSize != null) {
            stmt.bindString(12, channelSize);
        }
        stmt.bindLong(13, entity.getChannelStyle());
        stmt.bindLong(14, entity.getChannelTerm());
 
        String vilidDate = entity.getVilidDate();
        if (vilidDate != null) {
            stmt.bindString(15, vilidDate);
        }
 
        String hardLevel = entity.getHardLevel();
        if (hardLevel != null) {
            stmt.bindString(16, hardLevel);
        }
        stmt.bindLong(17, entity.getDiscussionPercent());
        stmt.bindLong(18, entity.getHomeworkPercent());
        stmt.bindLong(19, entity.getFinalTestPercent());
        stmt.bindLong(20, entity.getVideoNumber());
        stmt.bindLong(21, entity.getLimitVideoTestNum());
        stmt.bindLong(22, entity.getTeacherScore());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CourseDetailFilesEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String channelName = entity.getChannelName();
        if (channelName != null) {
            stmt.bindString(2, channelName);
        }
 
        String expectTime = entity.getExpectTime();
        if (expectTime != null) {
            stmt.bindString(3, expectTime);
        }
 
        String preImgFileid = entity.getPreImgFileid();
        if (preImgFileid != null) {
            stmt.bindString(4, preImgFileid);
        }
 
        String preVideoFileid = entity.getPreVideoFileid();
        if (preVideoFileid != null) {
            stmt.bindString(5, preVideoFileid);
        }
 
        String channelLogoFileid = entity.getChannelLogoFileid();
        if (channelLogoFileid != null) {
            stmt.bindString(6, channelLogoFileid);
        }
        stmt.bindLong(7, entity.getVideoTestPercent());
        stmt.bindLong(8, entity.getVideoPercent());
        stmt.bindLong(9, entity.getPassScore());
        stmt.bindLong(10, entity.getIsNeedapply());
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(11, schoolName);
        }
 
        String channelSize = entity.getChannelSize();
        if (channelSize != null) {
            stmt.bindString(12, channelSize);
        }
        stmt.bindLong(13, entity.getChannelStyle());
        stmt.bindLong(14, entity.getChannelTerm());
 
        String vilidDate = entity.getVilidDate();
        if (vilidDate != null) {
            stmt.bindString(15, vilidDate);
        }
 
        String hardLevel = entity.getHardLevel();
        if (hardLevel != null) {
            stmt.bindString(16, hardLevel);
        }
        stmt.bindLong(17, entity.getDiscussionPercent());
        stmt.bindLong(18, entity.getHomeworkPercent());
        stmt.bindLong(19, entity.getFinalTestPercent());
        stmt.bindLong(20, entity.getVideoNumber());
        stmt.bindLong(21, entity.getLimitVideoTestNum());
        stmt.bindLong(22, entity.getTeacherScore());
    }

    @Override
    protected final void attachEntity(CourseDetailFilesEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CourseDetailFilesEntity readEntity(Cursor cursor, int offset) {
        CourseDetailFilesEntity entity = new CourseDetailFilesEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // channelName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // expectTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // preImgFileid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // preVideoFileid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // channelLogoFileid
            cursor.getInt(offset + 6), // videoTestPercent
            cursor.getInt(offset + 7), // videoPercent
            cursor.getInt(offset + 8), // passScore
            cursor.getInt(offset + 9), // isNeedapply
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // schoolName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // channelSize
            cursor.getInt(offset + 12), // channelStyle
            cursor.getInt(offset + 13), // channelTerm
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // vilidDate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // hardLevel
            cursor.getInt(offset + 16), // discussionPercent
            cursor.getInt(offset + 17), // homeworkPercent
            cursor.getInt(offset + 18), // finalTestPercent
            cursor.getInt(offset + 19), // videoNumber
            cursor.getInt(offset + 20), // limitVideoTestNum
            cursor.getInt(offset + 21) // teacherScore
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CourseDetailFilesEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChannelName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExpectTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPreImgFileid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPreVideoFileid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChannelLogoFileid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideoTestPercent(cursor.getInt(offset + 6));
        entity.setVideoPercent(cursor.getInt(offset + 7));
        entity.setPassScore(cursor.getInt(offset + 8));
        entity.setIsNeedapply(cursor.getInt(offset + 9));
        entity.setSchoolName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setChannelSize(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setChannelStyle(cursor.getInt(offset + 12));
        entity.setChannelTerm(cursor.getInt(offset + 13));
        entity.setVilidDate(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setHardLevel(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDiscussionPercent(cursor.getInt(offset + 16));
        entity.setHomeworkPercent(cursor.getInt(offset + 17));
        entity.setFinalTestPercent(cursor.getInt(offset + 18));
        entity.setVideoNumber(cursor.getInt(offset + 19));
        entity.setLimitVideoTestNum(cursor.getInt(offset + 20));
        entity.setTeacherScore(cursor.getInt(offset + 21));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CourseDetailFilesEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CourseDetailFilesEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CourseDetailFilesEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPreCourseEntityDao().getAllColumns());
            builder.append(" FROM COURSE_DETAIL_FILES_ENTITY T");
            builder.append(" LEFT JOIN PRE_COURSE_ENTITY T0 ON T.\"ID\"=T0.\"CHANNEL_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CourseDetailFilesEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        CourseDetailFilesEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PreCourseEntity preCourse = loadCurrentOther(daoSession.getPreCourseEntityDao(), cursor, offset);
        entity.setPreCourse(preCourse);

        return entity;    
    }

    public CourseDetailFilesEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CourseDetailFilesEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CourseDetailFilesEntity> list = new ArrayList<CourseDetailFilesEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CourseDetailFilesEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CourseDetailFilesEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
