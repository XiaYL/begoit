package com.begoit.mooc.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.begoit.mooc.offline.entity.course.user_download.CourseDownLoadedEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE_DOWN_LOADED_ENTITY".
*/
public class CourseDownLoadedEntityDao extends AbstractDao<CourseDownLoadedEntity, String> {

    public static final String TABLENAME = "COURSE_DOWN_LOADED_ENTITY";

    /**
     * Properties of entity CourseDownLoadedEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CourseId = new Property(0, String.class, "courseId", true, "COURSE_ID");
        public final static Property CourseName = new Property(1, String.class, "courseName", false, "COURSE_NAME");
        public final static Property CourseWithSchool = new Property(2, String.class, "courseWithSchool", false, "COURSE_WITH_SCHOOL");
        public final static Property PreImgFileid = new Property(3, String.class, "preImgFileid", false, "PRE_IMG_FILEID");
        public final static Property CourseTotal = new Property(4, long.class, "courseTotal", false, "COURSE_TOTAL");
        public final static Property CourseFilesCount = new Property(5, int.class, "courseFilesCount", false, "COURSE_FILES_COUNT");
        public final static Property CourseDownloadedFilesCound = new Property(6, int.class, "courseDownloadedFilesCound", false, "COURSE_DOWNLOADED_FILES_COUND");
        public final static Property Progress = new Property(7, long.class, "progress", false, "PROGRESS");
        public final static Property Total = new Property(8, long.class, "total", false, "TOTAL");
        public final static Property CurrentTotalRxBytes = new Property(9, String.class, "currentTotalRxBytes", false, "CURRENT_TOTAL_RX_BYTES");
        public final static Property IsDownloadError = new Property(10, int.class, "isDownloadError", false, "IS_DOWNLOAD_ERROR");
    }


    public CourseDownLoadedEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDownLoadedEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE_DOWN_LOADED_ENTITY\" (" + //
                "\"COURSE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: courseId
                "\"COURSE_NAME\" TEXT," + // 1: courseName
                "\"COURSE_WITH_SCHOOL\" TEXT," + // 2: courseWithSchool
                "\"PRE_IMG_FILEID\" TEXT," + // 3: preImgFileid
                "\"COURSE_TOTAL\" INTEGER NOT NULL ," + // 4: courseTotal
                "\"COURSE_FILES_COUNT\" INTEGER NOT NULL ," + // 5: courseFilesCount
                "\"COURSE_DOWNLOADED_FILES_COUND\" INTEGER NOT NULL ," + // 6: courseDownloadedFilesCound
                "\"PROGRESS\" INTEGER NOT NULL ," + // 7: progress
                "\"TOTAL\" INTEGER NOT NULL ," + // 8: total
                "\"CURRENT_TOTAL_RX_BYTES\" TEXT," + // 9: currentTotalRxBytes
                "\"IS_DOWNLOAD_ERROR\" INTEGER NOT NULL );"); // 10: isDownloadError
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE_DOWN_LOADED_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CourseDownLoadedEntity entity) {
        stmt.clearBindings();
 
        String courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindString(1, courseId);
        }
 
        String courseName = entity.getCourseName();
        if (courseName != null) {
            stmt.bindString(2, courseName);
        }
 
        String courseWithSchool = entity.getCourseWithSchool();
        if (courseWithSchool != null) {
            stmt.bindString(3, courseWithSchool);
        }
 
        String preImgFileid = entity.getPreImgFileid();
        if (preImgFileid != null) {
            stmt.bindString(4, preImgFileid);
        }
        stmt.bindLong(5, entity.getCourseTotal());
        stmt.bindLong(6, entity.getCourseFilesCount());
        stmt.bindLong(7, entity.getCourseDownloadedFilesCound());
        stmt.bindLong(8, entity.getProgress());
        stmt.bindLong(9, entity.getTotal());
 
        String currentTotalRxBytes = entity.getCurrentTotalRxBytes();
        if (currentTotalRxBytes != null) {
            stmt.bindString(10, currentTotalRxBytes);
        }
        stmt.bindLong(11, entity.getIsDownloadError());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CourseDownLoadedEntity entity) {
        stmt.clearBindings();
 
        String courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindString(1, courseId);
        }
 
        String courseName = entity.getCourseName();
        if (courseName != null) {
            stmt.bindString(2, courseName);
        }
 
        String courseWithSchool = entity.getCourseWithSchool();
        if (courseWithSchool != null) {
            stmt.bindString(3, courseWithSchool);
        }
 
        String preImgFileid = entity.getPreImgFileid();
        if (preImgFileid != null) {
            stmt.bindString(4, preImgFileid);
        }
        stmt.bindLong(5, entity.getCourseTotal());
        stmt.bindLong(6, entity.getCourseFilesCount());
        stmt.bindLong(7, entity.getCourseDownloadedFilesCound());
        stmt.bindLong(8, entity.getProgress());
        stmt.bindLong(9, entity.getTotal());
 
        String currentTotalRxBytes = entity.getCurrentTotalRxBytes();
        if (currentTotalRxBytes != null) {
            stmt.bindString(10, currentTotalRxBytes);
        }
        stmt.bindLong(11, entity.getIsDownloadError());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CourseDownLoadedEntity readEntity(Cursor cursor, int offset) {
        CourseDownLoadedEntity entity = new CourseDownLoadedEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // courseId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // courseName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // courseWithSchool
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // preImgFileid
            cursor.getLong(offset + 4), // courseTotal
            cursor.getInt(offset + 5), // courseFilesCount
            cursor.getInt(offset + 6), // courseDownloadedFilesCound
            cursor.getLong(offset + 7), // progress
            cursor.getLong(offset + 8), // total
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // currentTotalRxBytes
            cursor.getInt(offset + 10) // isDownloadError
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CourseDownLoadedEntity entity, int offset) {
        entity.setCourseId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCourseName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCourseWithSchool(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPreImgFileid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCourseTotal(cursor.getLong(offset + 4));
        entity.setCourseFilesCount(cursor.getInt(offset + 5));
        entity.setCourseDownloadedFilesCound(cursor.getInt(offset + 6));
        entity.setProgress(cursor.getLong(offset + 7));
        entity.setTotal(cursor.getLong(offset + 8));
        entity.setCurrentTotalRxBytes(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsDownloadError(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CourseDownLoadedEntity entity, long rowId) {
        return entity.getCourseId();
    }
    
    @Override
    public String getKey(CourseDownLoadedEntity entity) {
        if(entity != null) {
            return entity.getCourseId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CourseDownLoadedEntity entity) {
        return entity.getCourseId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
