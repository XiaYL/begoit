package com.begoit.mooc.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.begoit.mooc.offline.entity.course.course_detail.course_files.FileInformationEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_INFORMATION_ENTITY".
*/
public class FileInformationEntityDao extends AbstractDao<FileInformationEntity, String> {

    public static final String TABLENAME = "FILE_INFORMATION_ENTITY";

    /**
     * Properties of entity FileInformationEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FileName = new Property(0, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSize = new Property(1, long.class, "fileSize", false, "FILE_SIZE");
        public final static Property FileUrl = new Property(2, String.class, "fileUrl", false, "FILE_URL");
        public final static Property FileId = new Property(3, String.class, "fileId", true, "FILE_ID");
        public final static Property DownloadStatus = new Property(4, int.class, "downloadStatus", false, "DOWNLOAD_STATUS");
        public final static Property ChannelId = new Property(5, String.class, "channelId", false, "CHANNEL_ID");
    }

    private Query<FileInformationEntity> courseDetailFilesEntity_FileInformationQuery;

    public FileInformationEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FileInformationEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_INFORMATION_ENTITY\" (" + //
                "\"FILE_NAME\" TEXT," + // 0: fileName
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 1: fileSize
                "\"FILE_URL\" TEXT," + // 2: fileUrl
                "\"FILE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 3: fileId
                "\"DOWNLOAD_STATUS\" INTEGER NOT NULL ," + // 4: downloadStatus
                "\"CHANNEL_ID\" TEXT NOT NULL );"); // 5: channelId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_INFORMATION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileInformationEntity entity) {
        stmt.clearBindings();
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(1, fileName);
        }
        stmt.bindLong(2, entity.getFileSize());
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(3, fileUrl);
        }
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(4, fileId);
        }
        stmt.bindLong(5, entity.getDownloadStatus());
        stmt.bindString(6, entity.getChannelId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileInformationEntity entity) {
        stmt.clearBindings();
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(1, fileName);
        }
        stmt.bindLong(2, entity.getFileSize());
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(3, fileUrl);
        }
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(4, fileId);
        }
        stmt.bindLong(5, entity.getDownloadStatus());
        stmt.bindString(6, entity.getChannelId());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public FileInformationEntity readEntity(Cursor cursor, int offset) {
        FileInformationEntity entity = new FileInformationEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fileName
            cursor.getLong(offset + 1), // fileSize
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileId
            cursor.getInt(offset + 4), // downloadStatus
            cursor.getString(offset + 5) // channelId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileInformationEntity entity, int offset) {
        entity.setFileName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFileSize(cursor.getLong(offset + 1));
        entity.setFileUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDownloadStatus(cursor.getInt(offset + 4));
        entity.setChannelId(cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FileInformationEntity entity, long rowId) {
        return entity.getFileId();
    }
    
    @Override
    public String getKey(FileInformationEntity entity) {
        if(entity != null) {
            return entity.getFileId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileInformationEntity entity) {
        return entity.getFileId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fileInformation" to-many relationship of CourseDetailFilesEntity. */
    public List<FileInformationEntity> _queryCourseDetailFilesEntity_FileInformation(String channelId) {
        synchronized (this) {
            if (courseDetailFilesEntity_FileInformationQuery == null) {
                QueryBuilder<FileInformationEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChannelId.eq(null));
                courseDetailFilesEntity_FileInformationQuery = queryBuilder.build();
            }
        }
        Query<FileInformationEntity> query = courseDetailFilesEntity_FileInformationQuery.forCurrentThread();
        query.setParameter(0, channelId);
        return query.list();
    }

}
