package com.begoit.mooc.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.begoit.mooc.offline.entity.kindMenu.MenuItemEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MENU_ITEM_ENTITY".
*/
public class MenuItemEntityDao extends AbstractDao<MenuItemEntity, Void> {

    public static final String TABLENAME = "MENU_ITEM_ENTITY";

    /**
     * Properties of entity MenuItemEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Level = new Property(0, int.class, "level", false, "LEVEL");
        public final static Property TypeName = new Property(1, String.class, "typeName", false, "TYPE_NAME");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
    }


    public MenuItemEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MenuItemEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MENU_ITEM_ENTITY\" (" + //
                "\"LEVEL\" INTEGER NOT NULL ," + // 0: level
                "\"TYPE_NAME\" TEXT," + // 1: typeName
                "\"ID\" TEXT);"); // 2: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MENU_ITEM_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MenuItemEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLevel());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MenuItemEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLevel());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MenuItemEntity readEntity(Cursor cursor, int offset) {
        MenuItemEntity entity = new MenuItemEntity( //
            cursor.getInt(offset + 0), // level
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MenuItemEntity entity, int offset) {
        entity.setLevel(cursor.getInt(offset + 0));
        entity.setTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MenuItemEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MenuItemEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(MenuItemEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
