package com.begoit.mooc.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.begoit.mooc.offline.entity.course.course_detail.course_files.PreCourseGroupEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRE_COURSE_GROUP_ENTITY".
*/
public class PreCourseGroupEntityDao extends AbstractDao<PreCourseGroupEntity, String> {

    public static final String TABLENAME = "PRE_COURSE_GROUP_ENTITY";

    /**
     * Properties of entity PreCourseGroupEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GroupId = new Property(0, String.class, "groupId", true, "GROUP_ID");
        public final static Property GroupName = new Property(1, String.class, "groupName", false, "GROUP_NAME");
        public final static Property ChannelId = new Property(2, String.class, "channelId", false, "CHANNEL_ID");
    }

    private DaoSession daoSession;

    private Query<PreCourseGroupEntity> preCourseEntity_PreCourseGroupQuery;

    public PreCourseGroupEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PreCourseGroupEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRE_COURSE_GROUP_ENTITY\" (" + //
                "\"GROUP_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: groupId
                "\"GROUP_NAME\" TEXT," + // 1: groupName
                "\"CHANNEL_ID\" TEXT);"); // 2: channelId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRE_COURSE_GROUP_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PreCourseGroupEntity entity) {
        stmt.clearBindings();
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(1, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(2, groupName);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(3, channelId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PreCourseGroupEntity entity) {
        stmt.clearBindings();
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(1, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(2, groupName);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(3, channelId);
        }
    }

    @Override
    protected final void attachEntity(PreCourseGroupEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PreCourseGroupEntity readEntity(Cursor cursor, int offset) {
        PreCourseGroupEntity entity = new PreCourseGroupEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // groupId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // channelId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PreCourseGroupEntity entity, int offset) {
        entity.setGroupId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGroupName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChannelId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PreCourseGroupEntity entity, long rowId) {
        return entity.getGroupId();
    }
    
    @Override
    public String getKey(PreCourseGroupEntity entity) {
        if(entity != null) {
            return entity.getGroupId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PreCourseGroupEntity entity) {
        return entity.getGroupId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "preCourseGroup" to-many relationship of PreCourseEntity. */
    public List<PreCourseGroupEntity> _queryPreCourseEntity_PreCourseGroup(String channelId) {
        synchronized (this) {
            if (preCourseEntity_PreCourseGroupQuery == null) {
                QueryBuilder<PreCourseGroupEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChannelId.eq(null));
                preCourseEntity_PreCourseGroupQuery = queryBuilder.build();
            }
        }
        Query<PreCourseGroupEntity> query = preCourseEntity_PreCourseGroupQuery.forCurrentThread();
        query.setParameter(0, channelId);
        return query.list();
    }

}
