package com.begoit.mooc.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.begoit.mooc.offline.entity.course.user_download.UserChannelEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_CHANNEL_ENTITY".
*/
public class UserChannelEntityDao extends AbstractDao<UserChannelEntity, String> {

    public static final String TABLENAME = "USER_CHANNEL_ENTITY";

    /**
     * Properties of entity UserChannelEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property IsChange = new Property(1, int.class, "isChange", false, "IS_CHANGE");
        public final static Property ChannelId = new Property(2, String.class, "channelId", false, "CHANNEL_ID");
        public final static Property UserAccount = new Property(3, String.class, "userAccount", false, "USER_ACCOUNT");
        public final static Property AddTime = new Property(4, String.class, "addTime", false, "ADD_TIME");
        public final static Property UpdateTime = new Property(5, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property VideoTestScore = new Property(6, int.class, "videoTestScore", false, "VIDEO_TEST_SCORE");
        public final static Property VideoTestSumScore = new Property(7, int.class, "videoTestSumScore", false, "VIDEO_TEST_SUM_SCORE");
        public final static Property VideoFinishScore = new Property(8, int.class, "videoFinishScore", false, "VIDEO_FINISH_SCORE");
        public final static Property VideoFinishSumCount = new Property(9, int.class, "videoFinishSumCount", false, "VIDEO_FINISH_SUM_COUNT");
        public final static Property HomeworkScore = new Property(10, float.class, "homeworkScore", false, "HOMEWORK_SCORE");
        public final static Property HomeworkSumScore = new Property(11, int.class, "homeworkSumScore", false, "HOMEWORK_SUM_SCORE");
        public final static Property ExchangeScore = new Property(12, int.class, "exchangeScore", false, "EXCHANGE_SCORE");
        public final static Property NormalSumScore = new Property(13, String.class, "normalSumScore", false, "NORMAL_SUM_SCORE");
        public final static Property ExamScore = new Property(14, int.class, "examScore", false, "EXAM_SCORE");
        public final static Property SumScore = new Property(15, String.class, "sumScore", false, "SUM_SCORE");
        public final static Property ChannelStyle = new Property(16, int.class, "channelStyle", false, "CHANNEL_STYLE");
        public final static Property IsTeacher = new Property(17, int.class, "isTeacher", false, "IS_TEACHER");
        public final static Property TeacherApproveTime = new Property(18, String.class, "teacherApproveTime", false, "TEACHER_APPROVE_TIME");
        public final static Property ExamStatus = new Property(19, int.class, "examStatus", false, "EXAM_STATUS");
        public final static Property ChannelTerm = new Property(20, int.class, "channelTerm", false, "CHANNEL_TERM");
        public final static Property Collect = new Property(21, String.class, "collect", false, "COLLECT");
        public final static Property CollectTime = new Property(22, String.class, "collectTime", false, "COLLECT_TIME");
    }


    public UserChannelEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserChannelEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_CHANNEL_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"IS_CHANGE\" INTEGER NOT NULL ," + // 1: isChange
                "\"CHANNEL_ID\" TEXT," + // 2: channelId
                "\"USER_ACCOUNT\" TEXT," + // 3: userAccount
                "\"ADD_TIME\" TEXT," + // 4: addTime
                "\"UPDATE_TIME\" TEXT," + // 5: updateTime
                "\"VIDEO_TEST_SCORE\" INTEGER NOT NULL ," + // 6: videoTestScore
                "\"VIDEO_TEST_SUM_SCORE\" INTEGER NOT NULL ," + // 7: videoTestSumScore
                "\"VIDEO_FINISH_SCORE\" INTEGER NOT NULL ," + // 8: videoFinishScore
                "\"VIDEO_FINISH_SUM_COUNT\" INTEGER NOT NULL ," + // 9: videoFinishSumCount
                "\"HOMEWORK_SCORE\" REAL NOT NULL ," + // 10: homeworkScore
                "\"HOMEWORK_SUM_SCORE\" INTEGER NOT NULL ," + // 11: homeworkSumScore
                "\"EXCHANGE_SCORE\" INTEGER NOT NULL ," + // 12: exchangeScore
                "\"NORMAL_SUM_SCORE\" TEXT," + // 13: normalSumScore
                "\"EXAM_SCORE\" INTEGER NOT NULL ," + // 14: examScore
                "\"SUM_SCORE\" TEXT," + // 15: sumScore
                "\"CHANNEL_STYLE\" INTEGER NOT NULL ," + // 16: channelStyle
                "\"IS_TEACHER\" INTEGER NOT NULL ," + // 17: isTeacher
                "\"TEACHER_APPROVE_TIME\" TEXT," + // 18: teacherApproveTime
                "\"EXAM_STATUS\" INTEGER NOT NULL ," + // 19: examStatus
                "\"CHANNEL_TERM\" INTEGER NOT NULL ," + // 20: channelTerm
                "\"COLLECT\" TEXT," + // 21: collect
                "\"COLLECT_TIME\" TEXT);"); // 22: collectTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_CHANNEL_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserChannelEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getIsChange());
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(3, channelId);
        }
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(4, userAccount);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(5, addTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
        stmt.bindLong(7, entity.getVideoTestScore());
        stmt.bindLong(8, entity.getVideoTestSumScore());
        stmt.bindLong(9, entity.getVideoFinishScore());
        stmt.bindLong(10, entity.getVideoFinishSumCount());
        stmt.bindDouble(11, entity.getHomeworkScore());
        stmt.bindLong(12, entity.getHomeworkSumScore());
        stmt.bindLong(13, entity.getExchangeScore());
 
        String normalSumScore = entity.getNormalSumScore();
        if (normalSumScore != null) {
            stmt.bindString(14, normalSumScore);
        }
        stmt.bindLong(15, entity.getExamScore());
 
        String sumScore = entity.getSumScore();
        if (sumScore != null) {
            stmt.bindString(16, sumScore);
        }
        stmt.bindLong(17, entity.getChannelStyle());
        stmt.bindLong(18, entity.getIsTeacher());
 
        String teacherApproveTime = entity.getTeacherApproveTime();
        if (teacherApproveTime != null) {
            stmt.bindString(19, teacherApproveTime);
        }
        stmt.bindLong(20, entity.getExamStatus());
        stmt.bindLong(21, entity.getChannelTerm());
 
        String collect = entity.getCollect();
        if (collect != null) {
            stmt.bindString(22, collect);
        }
 
        String collectTime = entity.getCollectTime();
        if (collectTime != null) {
            stmt.bindString(23, collectTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserChannelEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getIsChange());
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(3, channelId);
        }
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(4, userAccount);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(5, addTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
        stmt.bindLong(7, entity.getVideoTestScore());
        stmt.bindLong(8, entity.getVideoTestSumScore());
        stmt.bindLong(9, entity.getVideoFinishScore());
        stmt.bindLong(10, entity.getVideoFinishSumCount());
        stmt.bindDouble(11, entity.getHomeworkScore());
        stmt.bindLong(12, entity.getHomeworkSumScore());
        stmt.bindLong(13, entity.getExchangeScore());
 
        String normalSumScore = entity.getNormalSumScore();
        if (normalSumScore != null) {
            stmt.bindString(14, normalSumScore);
        }
        stmt.bindLong(15, entity.getExamScore());
 
        String sumScore = entity.getSumScore();
        if (sumScore != null) {
            stmt.bindString(16, sumScore);
        }
        stmt.bindLong(17, entity.getChannelStyle());
        stmt.bindLong(18, entity.getIsTeacher());
 
        String teacherApproveTime = entity.getTeacherApproveTime();
        if (teacherApproveTime != null) {
            stmt.bindString(19, teacherApproveTime);
        }
        stmt.bindLong(20, entity.getExamStatus());
        stmt.bindLong(21, entity.getChannelTerm());
 
        String collect = entity.getCollect();
        if (collect != null) {
            stmt.bindString(22, collect);
        }
 
        String collectTime = entity.getCollectTime();
        if (collectTime != null) {
            stmt.bindString(23, collectTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserChannelEntity readEntity(Cursor cursor, int offset) {
        UserChannelEntity entity = new UserChannelEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getInt(offset + 1), // isChange
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // channelId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userAccount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // addTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updateTime
            cursor.getInt(offset + 6), // videoTestScore
            cursor.getInt(offset + 7), // videoTestSumScore
            cursor.getInt(offset + 8), // videoFinishScore
            cursor.getInt(offset + 9), // videoFinishSumCount
            cursor.getFloat(offset + 10), // homeworkScore
            cursor.getInt(offset + 11), // homeworkSumScore
            cursor.getInt(offset + 12), // exchangeScore
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // normalSumScore
            cursor.getInt(offset + 14), // examScore
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // sumScore
            cursor.getInt(offset + 16), // channelStyle
            cursor.getInt(offset + 17), // isTeacher
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // teacherApproveTime
            cursor.getInt(offset + 19), // examStatus
            cursor.getInt(offset + 20), // channelTerm
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // collect
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // collectTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserChannelEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsChange(cursor.getInt(offset + 1));
        entity.setChannelId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserAccount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideoTestScore(cursor.getInt(offset + 6));
        entity.setVideoTestSumScore(cursor.getInt(offset + 7));
        entity.setVideoFinishScore(cursor.getInt(offset + 8));
        entity.setVideoFinishSumCount(cursor.getInt(offset + 9));
        entity.setHomeworkScore(cursor.getFloat(offset + 10));
        entity.setHomeworkSumScore(cursor.getInt(offset + 11));
        entity.setExchangeScore(cursor.getInt(offset + 12));
        entity.setNormalSumScore(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setExamScore(cursor.getInt(offset + 14));
        entity.setSumScore(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setChannelStyle(cursor.getInt(offset + 16));
        entity.setIsTeacher(cursor.getInt(offset + 17));
        entity.setTeacherApproveTime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setExamStatus(cursor.getInt(offset + 19));
        entity.setChannelTerm(cursor.getInt(offset + 20));
        entity.setCollect(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCollectTime(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserChannelEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(UserChannelEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserChannelEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
