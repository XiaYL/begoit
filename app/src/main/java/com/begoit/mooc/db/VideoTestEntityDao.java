package com.begoit.mooc.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.begoit.mooc.offline.entity.course.course_detail.course_files.VideoTestEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_TEST_ENTITY".
*/
public class VideoTestEntityDao extends AbstractDao<VideoTestEntity, String> {

    public static final String TABLENAME = "VIDEO_TEST_ENTITY";

    /**
     * Properties of entity VideoTestEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property VideoId = new Property(1, String.class, "videoId", false, "VIDEO_ID");
        public final static Property TestType = new Property(2, int.class, "testType", false, "TEST_TYPE");
        public final static Property TestTitle = new Property(3, String.class, "testTitle", false, "TEST_TITLE");
        public final static Property QuestionA = new Property(4, String.class, "questionA", false, "QUESTION_A");
        public final static Property QuestionB = new Property(5, String.class, "questionB", false, "QUESTION_B");
        public final static Property QuestionC = new Property(6, String.class, "questionC", false, "QUESTION_C");
        public final static Property QuestionD = new Property(7, String.class, "questionD", false, "QUESTION_D");
        public final static Property QuestionE = new Property(8, String.class, "questionE", false, "QUESTION_E");
        public final static Property QuestionF = new Property(9, String.class, "questionF", false, "QUESTION_F");
        public final static Property QuestionG = new Property(10, String.class, "questionG", false, "QUESTION_G");
        public final static Property QuestionH = new Property(11, String.class, "questionH", false, "QUESTION_H");
        public final static Property QuestionI = new Property(12, String.class, "questionI", false, "QUESTION_I");
        public final static Property QuestionJ = new Property(13, String.class, "questionJ", false, "QUESTION_J");
        public final static Property Answer = new Property(14, String.class, "answer", false, "ANSWER");
        public final static Property Score = new Property(15, int.class, "score", false, "SCORE");
        public final static Property TestStyle = new Property(16, String.class, "testStyle", false, "TEST_STYLE");
        public final static Property AudioFileid = new Property(17, String.class, "audioFileid", false, "AUDIO_FILEID");
        public final static Property IsAnswerChange = new Property(18, int.class, "isAnswerChange", false, "IS_ANSWER_CHANGE");
        public final static Property BlankSpaceNum = new Property(19, int.class, "blankSpaceNum", false, "BLANK_SPACE_NUM");
    }

    private Query<VideoTestEntity> videonobEntity_VideoTestbQuery;

    public VideoTestEntityDao(DaoConfig config) {
        super(config);
    }
    
    public VideoTestEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_TEST_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"VIDEO_ID\" TEXT NOT NULL ," + // 1: videoId
                "\"TEST_TYPE\" INTEGER NOT NULL ," + // 2: testType
                "\"TEST_TITLE\" TEXT," + // 3: testTitle
                "\"QUESTION_A\" TEXT," + // 4: questionA
                "\"QUESTION_B\" TEXT," + // 5: questionB
                "\"QUESTION_C\" TEXT," + // 6: questionC
                "\"QUESTION_D\" TEXT," + // 7: questionD
                "\"QUESTION_E\" TEXT," + // 8: questionE
                "\"QUESTION_F\" TEXT," + // 9: questionF
                "\"QUESTION_G\" TEXT," + // 10: questionG
                "\"QUESTION_H\" TEXT," + // 11: questionH
                "\"QUESTION_I\" TEXT," + // 12: questionI
                "\"QUESTION_J\" TEXT," + // 13: questionJ
                "\"ANSWER\" TEXT," + // 14: answer
                "\"SCORE\" INTEGER NOT NULL ," + // 15: score
                "\"TEST_STYLE\" TEXT," + // 16: testStyle
                "\"AUDIO_FILEID\" TEXT," + // 17: audioFileid
                "\"IS_ANSWER_CHANGE\" INTEGER NOT NULL ," + // 18: isAnswerChange
                "\"BLANK_SPACE_NUM\" INTEGER NOT NULL );"); // 19: blankSpaceNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_TEST_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoTestEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getVideoId());
        stmt.bindLong(3, entity.getTestType());
 
        String testTitle = entity.getTestTitle();
        if (testTitle != null) {
            stmt.bindString(4, testTitle);
        }
 
        String questionA = entity.getQuestionA();
        if (questionA != null) {
            stmt.bindString(5, questionA);
        }
 
        String questionB = entity.getQuestionB();
        if (questionB != null) {
            stmt.bindString(6, questionB);
        }
 
        String questionC = entity.getQuestionC();
        if (questionC != null) {
            stmt.bindString(7, questionC);
        }
 
        String questionD = entity.getQuestionD();
        if (questionD != null) {
            stmt.bindString(8, questionD);
        }
 
        String questionE = entity.getQuestionE();
        if (questionE != null) {
            stmt.bindString(9, questionE);
        }
 
        String questionF = entity.getQuestionF();
        if (questionF != null) {
            stmt.bindString(10, questionF);
        }
 
        String questionG = entity.getQuestionG();
        if (questionG != null) {
            stmt.bindString(11, questionG);
        }
 
        String questionH = entity.getQuestionH();
        if (questionH != null) {
            stmt.bindString(12, questionH);
        }
 
        String questionI = entity.getQuestionI();
        if (questionI != null) {
            stmt.bindString(13, questionI);
        }
 
        String questionJ = entity.getQuestionJ();
        if (questionJ != null) {
            stmt.bindString(14, questionJ);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(15, answer);
        }
        stmt.bindLong(16, entity.getScore());
 
        String testStyle = entity.getTestStyle();
        if (testStyle != null) {
            stmt.bindString(17, testStyle);
        }
 
        String audioFileid = entity.getAudioFileid();
        if (audioFileid != null) {
            stmt.bindString(18, audioFileid);
        }
        stmt.bindLong(19, entity.getIsAnswerChange());
        stmt.bindLong(20, entity.getBlankSpaceNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoTestEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getVideoId());
        stmt.bindLong(3, entity.getTestType());
 
        String testTitle = entity.getTestTitle();
        if (testTitle != null) {
            stmt.bindString(4, testTitle);
        }
 
        String questionA = entity.getQuestionA();
        if (questionA != null) {
            stmt.bindString(5, questionA);
        }
 
        String questionB = entity.getQuestionB();
        if (questionB != null) {
            stmt.bindString(6, questionB);
        }
 
        String questionC = entity.getQuestionC();
        if (questionC != null) {
            stmt.bindString(7, questionC);
        }
 
        String questionD = entity.getQuestionD();
        if (questionD != null) {
            stmt.bindString(8, questionD);
        }
 
        String questionE = entity.getQuestionE();
        if (questionE != null) {
            stmt.bindString(9, questionE);
        }
 
        String questionF = entity.getQuestionF();
        if (questionF != null) {
            stmt.bindString(10, questionF);
        }
 
        String questionG = entity.getQuestionG();
        if (questionG != null) {
            stmt.bindString(11, questionG);
        }
 
        String questionH = entity.getQuestionH();
        if (questionH != null) {
            stmt.bindString(12, questionH);
        }
 
        String questionI = entity.getQuestionI();
        if (questionI != null) {
            stmt.bindString(13, questionI);
        }
 
        String questionJ = entity.getQuestionJ();
        if (questionJ != null) {
            stmt.bindString(14, questionJ);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(15, answer);
        }
        stmt.bindLong(16, entity.getScore());
 
        String testStyle = entity.getTestStyle();
        if (testStyle != null) {
            stmt.bindString(17, testStyle);
        }
 
        String audioFileid = entity.getAudioFileid();
        if (audioFileid != null) {
            stmt.bindString(18, audioFileid);
        }
        stmt.bindLong(19, entity.getIsAnswerChange());
        stmt.bindLong(20, entity.getBlankSpaceNum());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public VideoTestEntity readEntity(Cursor cursor, int offset) {
        VideoTestEntity entity = new VideoTestEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // videoId
            cursor.getInt(offset + 2), // testType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // testTitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // questionA
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // questionB
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // questionC
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // questionD
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // questionE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // questionF
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // questionG
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // questionH
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // questionI
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // questionJ
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // answer
            cursor.getInt(offset + 15), // score
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // testStyle
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // audioFileid
            cursor.getInt(offset + 18), // isAnswerChange
            cursor.getInt(offset + 19) // blankSpaceNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoTestEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVideoId(cursor.getString(offset + 1));
        entity.setTestType(cursor.getInt(offset + 2));
        entity.setTestTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQuestionA(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQuestionB(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQuestionC(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQuestionD(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQuestionE(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQuestionF(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setQuestionG(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQuestionH(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setQuestionI(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setQuestionJ(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAnswer(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setScore(cursor.getInt(offset + 15));
        entity.setTestStyle(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAudioFileid(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsAnswerChange(cursor.getInt(offset + 18));
        entity.setBlankSpaceNum(cursor.getInt(offset + 19));
     }
    
    @Override
    protected final String updateKeyAfterInsert(VideoTestEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(VideoTestEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoTestEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "videoTestb" to-many relationship of VideonobEntity. */
    public List<VideoTestEntity> _queryVideonobEntity_VideoTestb(String videoId) {
        synchronized (this) {
            if (videonobEntity_VideoTestbQuery == null) {
                QueryBuilder<VideoTestEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.VideoId.eq(null));
                videonobEntity_VideoTestbQuery = queryBuilder.build();
            }
        }
        Query<VideoTestEntity> query = videonobEntity_VideoTestbQuery.forCurrentThread();
        query.setParameter(0, videoId);
        return query.list();
    }

}
