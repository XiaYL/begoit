package com.begoit.mooc.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.begoit.mooc.offline.entity.course.user_download.VideoTestLogEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_TEST_LOG_ENTITY".
*/
public class VideoTestLogEntityDao extends AbstractDao<VideoTestLogEntity, String> {

    public static final String TABLENAME = "VIDEO_TEST_LOG_ENTITY";

    /**
     * Properties of entity VideoTestLogEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property IsChange = new Property(1, int.class, "isChange", false, "IS_CHANGE");
        public final static Property VideoTestId = new Property(2, String.class, "videoTestId", false, "VIDEO_TEST_ID");
        public final static Property UserAccount = new Property(3, String.class, "userAccount", false, "USER_ACCOUNT");
        public final static Property AddTime = new Property(4, String.class, "addTime", false, "ADD_TIME");
        public final static Property Answer = new Property(5, String.class, "answer", false, "ANSWER");
        public final static Property Score = new Property(6, int.class, "score", false, "SCORE");
        public final static Property Ip = new Property(7, String.class, "ip", false, "IP");
        public final static Property Uuid = new Property(8, String.class, "uuid", false, "UUID");
        public final static Property Times = new Property(9, int.class, "times", false, "TIMES");
    }


    public VideoTestLogEntityDao(DaoConfig config) {
        super(config);
    }
    
    public VideoTestLogEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_TEST_LOG_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"IS_CHANGE\" INTEGER NOT NULL ," + // 1: isChange
                "\"VIDEO_TEST_ID\" TEXT," + // 2: videoTestId
                "\"USER_ACCOUNT\" TEXT," + // 3: userAccount
                "\"ADD_TIME\" TEXT," + // 4: addTime
                "\"ANSWER\" TEXT," + // 5: answer
                "\"SCORE\" INTEGER NOT NULL ," + // 6: score
                "\"IP\" TEXT," + // 7: ip
                "\"UUID\" TEXT," + // 8: uuid
                "\"TIMES\" INTEGER NOT NULL );"); // 9: times
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_TEST_LOG_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoTestLogEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getIsChange());
 
        String videoTestId = entity.getVideoTestId();
        if (videoTestId != null) {
            stmt.bindString(3, videoTestId);
        }
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(4, userAccount);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(5, addTime);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(6, answer);
        }
        stmt.bindLong(7, entity.getScore());
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(8, ip);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(9, uuid);
        }
        stmt.bindLong(10, entity.getTimes());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoTestLogEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getIsChange());
 
        String videoTestId = entity.getVideoTestId();
        if (videoTestId != null) {
            stmt.bindString(3, videoTestId);
        }
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(4, userAccount);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(5, addTime);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(6, answer);
        }
        stmt.bindLong(7, entity.getScore());
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(8, ip);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(9, uuid);
        }
        stmt.bindLong(10, entity.getTimes());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public VideoTestLogEntity readEntity(Cursor cursor, int offset) {
        VideoTestLogEntity entity = new VideoTestLogEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getInt(offset + 1), // isChange
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // videoTestId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userAccount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // addTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // answer
            cursor.getInt(offset + 6), // score
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ip
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // uuid
            cursor.getInt(offset + 9) // times
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoTestLogEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsChange(cursor.getInt(offset + 1));
        entity.setVideoTestId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserAccount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAnswer(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setScore(cursor.getInt(offset + 6));
        entity.setIp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUuid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTimes(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(VideoTestLogEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(VideoTestLogEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoTestLogEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
