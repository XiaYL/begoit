package com.begoit.mooc.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.begoit.mooc.offline.entity.course.user_download.VideoTestScoreEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_TEST_SCORE_ENTITY".
*/
public class VideoTestScoreEntityDao extends AbstractDao<VideoTestScoreEntity, String> {

    public static final String TABLENAME = "VIDEO_TEST_SCORE_ENTITY";

    /**
     * Properties of entity VideoTestScoreEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property IsChange = new Property(1, int.class, "isChange", false, "IS_CHANGE");
        public final static Property UserAccount = new Property(2, String.class, "userAccount", false, "USER_ACCOUNT");
        public final static Property VideoId = new Property(3, String.class, "videoId", false, "VIDEO_ID");
        public final static Property AddTime = new Property(4, String.class, "addTime", false, "ADD_TIME");
        public final static Property UpdateTime = new Property(5, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Score = new Property(6, int.class, "score", false, "SCORE");
        public final static Property AnswerCount = new Property(7, int.class, "answerCount", false, "ANSWER_COUNT");
        public final static Property AnswerTotalScore = new Property(8, int.class, "answerTotalScore", false, "ANSWER_TOTAL_SCORE");
        public final static Property FinalTest = new Property(9, int.class, "finalTest", false, "FINAL_TEST");
        public final static Property VideoTestId = new Property(10, String.class, "videoTestId", false, "VIDEO_TEST_ID");
        public final static Property Watch = new Property(11, int.class, "watch", false, "WATCH");
        public final static Property VideoCompleteTime = new Property(12, int.class, "videoCompleteTime", false, "VIDEO_COMPLETE_TIME");
        public final static Property VideoLength = new Property(13, int.class, "videoLength", false, "VIDEO_LENGTH");
        public final static Property ChannelId = new Property(14, String.class, "channelId", false, "CHANNEL_ID");
        public final static Property ChapterId = new Property(15, String.class, "chapterId", false, "CHAPTER_ID");
        public final static Property SectionId = new Property(16, String.class, "sectionId", false, "SECTION_ID");
        public final static Property Ip = new Property(17, String.class, "ip", false, "IP");
        public final static Property FinalTestEnd = new Property(18, String.class, "finalTestEnd", false, "FINAL_TEST_END");
        public final static Property ChannelTerm = new Property(19, String.class, "channelTerm", false, "CHANNEL_TERM");
    }


    public VideoTestScoreEntityDao(DaoConfig config) {
        super(config);
    }
    
    public VideoTestScoreEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_TEST_SCORE_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"IS_CHANGE\" INTEGER NOT NULL ," + // 1: isChange
                "\"USER_ACCOUNT\" TEXT," + // 2: userAccount
                "\"VIDEO_ID\" TEXT UNIQUE ," + // 3: videoId
                "\"ADD_TIME\" TEXT," + // 4: addTime
                "\"UPDATE_TIME\" TEXT," + // 5: updateTime
                "\"SCORE\" INTEGER NOT NULL ," + // 6: score
                "\"ANSWER_COUNT\" INTEGER NOT NULL ," + // 7: answerCount
                "\"ANSWER_TOTAL_SCORE\" INTEGER NOT NULL ," + // 8: answerTotalScore
                "\"FINAL_TEST\" INTEGER NOT NULL ," + // 9: finalTest
                "\"VIDEO_TEST_ID\" TEXT," + // 10: videoTestId
                "\"WATCH\" INTEGER NOT NULL ," + // 11: watch
                "\"VIDEO_COMPLETE_TIME\" INTEGER NOT NULL ," + // 12: videoCompleteTime
                "\"VIDEO_LENGTH\" INTEGER NOT NULL ," + // 13: videoLength
                "\"CHANNEL_ID\" TEXT," + // 14: channelId
                "\"CHAPTER_ID\" TEXT," + // 15: chapterId
                "\"SECTION_ID\" TEXT," + // 16: sectionId
                "\"IP\" TEXT," + // 17: ip
                "\"FINAL_TEST_END\" TEXT," + // 18: finalTestEnd
                "\"CHANNEL_TERM\" TEXT);"); // 19: channelTerm
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_TEST_SCORE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoTestScoreEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getIsChange());
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(3, userAccount);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(4, videoId);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(5, addTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
        stmt.bindLong(7, entity.getScore());
        stmt.bindLong(8, entity.getAnswerCount());
        stmt.bindLong(9, entity.getAnswerTotalScore());
        stmt.bindLong(10, entity.getFinalTest());
 
        String videoTestId = entity.getVideoTestId();
        if (videoTestId != null) {
            stmt.bindString(11, videoTestId);
        }
        stmt.bindLong(12, entity.getWatch());
        stmt.bindLong(13, entity.getVideoCompleteTime());
        stmt.bindLong(14, entity.getVideoLength());
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(15, channelId);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(16, chapterId);
        }
 
        String sectionId = entity.getSectionId();
        if (sectionId != null) {
            stmt.bindString(17, sectionId);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(18, ip);
        }
 
        String finalTestEnd = entity.getFinalTestEnd();
        if (finalTestEnd != null) {
            stmt.bindString(19, finalTestEnd);
        }
 
        String channelTerm = entity.getChannelTerm();
        if (channelTerm != null) {
            stmt.bindString(20, channelTerm);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoTestScoreEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getIsChange());
 
        String userAccount = entity.getUserAccount();
        if (userAccount != null) {
            stmt.bindString(3, userAccount);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(4, videoId);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(5, addTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
        stmt.bindLong(7, entity.getScore());
        stmt.bindLong(8, entity.getAnswerCount());
        stmt.bindLong(9, entity.getAnswerTotalScore());
        stmt.bindLong(10, entity.getFinalTest());
 
        String videoTestId = entity.getVideoTestId();
        if (videoTestId != null) {
            stmt.bindString(11, videoTestId);
        }
        stmt.bindLong(12, entity.getWatch());
        stmt.bindLong(13, entity.getVideoCompleteTime());
        stmt.bindLong(14, entity.getVideoLength());
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(15, channelId);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(16, chapterId);
        }
 
        String sectionId = entity.getSectionId();
        if (sectionId != null) {
            stmt.bindString(17, sectionId);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(18, ip);
        }
 
        String finalTestEnd = entity.getFinalTestEnd();
        if (finalTestEnd != null) {
            stmt.bindString(19, finalTestEnd);
        }
 
        String channelTerm = entity.getChannelTerm();
        if (channelTerm != null) {
            stmt.bindString(20, channelTerm);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public VideoTestScoreEntity readEntity(Cursor cursor, int offset) {
        VideoTestScoreEntity entity = new VideoTestScoreEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getInt(offset + 1), // isChange
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userAccount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // videoId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // addTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updateTime
            cursor.getInt(offset + 6), // score
            cursor.getInt(offset + 7), // answerCount
            cursor.getInt(offset + 8), // answerTotalScore
            cursor.getInt(offset + 9), // finalTest
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // videoTestId
            cursor.getInt(offset + 11), // watch
            cursor.getInt(offset + 12), // videoCompleteTime
            cursor.getInt(offset + 13), // videoLength
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // channelId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // chapterId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // sectionId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ip
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // finalTestEnd
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // channelTerm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoTestScoreEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsChange(cursor.getInt(offset + 1));
        entity.setUserAccount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVideoId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setScore(cursor.getInt(offset + 6));
        entity.setAnswerCount(cursor.getInt(offset + 7));
        entity.setAnswerTotalScore(cursor.getInt(offset + 8));
        entity.setFinalTest(cursor.getInt(offset + 9));
        entity.setVideoTestId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWatch(cursor.getInt(offset + 11));
        entity.setVideoCompleteTime(cursor.getInt(offset + 12));
        entity.setVideoLength(cursor.getInt(offset + 13));
        entity.setChannelId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setChapterId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSectionId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIp(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFinalTestEnd(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setChannelTerm(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final String updateKeyAfterInsert(VideoTestScoreEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(VideoTestScoreEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoTestScoreEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
