package com.begoit.mooc.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.begoit.mooc.offline.entity.course.course_detail.course_files.VideonobEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEONOB_ENTITY".
*/
public class VideonobEntityDao extends AbstractDao<VideonobEntity, String> {

    public static final String TABLENAME = "VIDEONOB_ENTITY";

    /**
     * Properties of entity VideonobEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property SectionId = new Property(1, String.class, "sectionId", false, "SECTION_ID");
        public final static Property VideoTitle = new Property(2, String.class, "videoTitle", false, "VIDEO_TITLE");
        public final static Property VideoFileId = new Property(3, String.class, "videoFileId", false, "VIDEO_FILE_ID");
        public final static Property VideoSubtitleFileId = new Property(4, String.class, "videoSubtitleFileId", false, "VIDEO_SUBTITLE_FILE_ID");
        public final static Property VideoLength = new Property(5, String.class, "videoLength", false, "VIDEO_LENGTH");
        public final static Property Sort = new Property(6, String.class, "sort", false, "SORT");
        public final static Property IsVideo = new Property(7, int.class, "isVideo", false, "IS_VIDEO");
    }

    private DaoSession daoSession;

    private Query<VideonobEntity> articelEntity_VideonobQuery;

    public VideonobEntityDao(DaoConfig config) {
        super(config);
    }
    
    public VideonobEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEONOB_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"SECTION_ID\" TEXT NOT NULL ," + // 1: sectionId
                "\"VIDEO_TITLE\" TEXT," + // 2: videoTitle
                "\"VIDEO_FILE_ID\" TEXT," + // 3: videoFileId
                "\"VIDEO_SUBTITLE_FILE_ID\" TEXT," + // 4: videoSubtitleFileId
                "\"VIDEO_LENGTH\" TEXT," + // 5: videoLength
                "\"SORT\" TEXT," + // 6: sort
                "\"IS_VIDEO\" INTEGER NOT NULL );"); // 7: isVideo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEONOB_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideonobEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getSectionId());
 
        String videoTitle = entity.getVideoTitle();
        if (videoTitle != null) {
            stmt.bindString(3, videoTitle);
        }
 
        String videoFileId = entity.getVideoFileId();
        if (videoFileId != null) {
            stmt.bindString(4, videoFileId);
        }
 
        String videoSubtitleFileId = entity.getVideoSubtitleFileId();
        if (videoSubtitleFileId != null) {
            stmt.bindString(5, videoSubtitleFileId);
        }
 
        String videoLength = entity.getVideoLength();
        if (videoLength != null) {
            stmt.bindString(6, videoLength);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(7, sort);
        }
        stmt.bindLong(8, entity.getIsVideo());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideonobEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getSectionId());
 
        String videoTitle = entity.getVideoTitle();
        if (videoTitle != null) {
            stmt.bindString(3, videoTitle);
        }
 
        String videoFileId = entity.getVideoFileId();
        if (videoFileId != null) {
            stmt.bindString(4, videoFileId);
        }
 
        String videoSubtitleFileId = entity.getVideoSubtitleFileId();
        if (videoSubtitleFileId != null) {
            stmt.bindString(5, videoSubtitleFileId);
        }
 
        String videoLength = entity.getVideoLength();
        if (videoLength != null) {
            stmt.bindString(6, videoLength);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(7, sort);
        }
        stmt.bindLong(8, entity.getIsVideo());
    }

    @Override
    protected final void attachEntity(VideonobEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public VideonobEntity readEntity(Cursor cursor, int offset) {
        VideonobEntity entity = new VideonobEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // sectionId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // videoTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // videoFileId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // videoSubtitleFileId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // videoLength
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sort
            cursor.getInt(offset + 7) // isVideo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideonobEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSectionId(cursor.getString(offset + 1));
        entity.setVideoTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVideoFileId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVideoSubtitleFileId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideoLength(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSort(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsVideo(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(VideonobEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(VideonobEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideonobEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "videonob" to-many relationship of ArticelEntity. */
    public List<VideonobEntity> _queryArticelEntity_Videonob(String sectionId) {
        synchronized (this) {
            if (articelEntity_VideonobQuery == null) {
                QueryBuilder<VideonobEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SectionId.eq(null));
                articelEntity_VideonobQuery = queryBuilder.build();
            }
        }
        Query<VideonobEntity> query = articelEntity_VideonobQuery.forCurrentThread();
        query.setParameter(0, sectionId);
        return query.list();
    }

}
